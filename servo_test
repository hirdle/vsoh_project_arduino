#include "Arduino.h"
#include "Servo.h"

Servo servo_catch;
Servo servo_rotate_base;
Servo servo_folding_base;
Servo servo_folding_catch;

int servo_catch_pin = 8;
int servo_rotate_base_pin = 5;
int servo_folding_base_pin = 7;
int servo_folding_catch_pin = 6;

int catch_default = 180;
int rotate_base_default = 60;
int folding_base_default = 90;
int folding_catch_default = 0;

int drive_rotate_default = 90;
int stop_speed = 1500;

Servo motor;
Servo servo_drive;

int motor_pin = 10;
int servo_drive_pin = 11;

void setup() {
  Serial.begin(115200);

  motor.attach(motor_pin);
  servo_drive.attach(servo_drive_pin);

  motor.writeMicroseconds(stop_speed);
  servo_drive.write(drive_rotate_default);

  servo_catch.attach(servo_catch_pin);
  servo_rotate_base.attach(servo_rotate_base_pin);
  servo_folding_base.attach(servo_folding_base_pin);
  servo_folding_catch.attach(servo_folding_catch_pin);

  servo_catch.write(catch_default);
  servo_rotate_base.write(rotate_base_default);
  servo_folding_base.write(folding_base_default);
  servo_folding_catch.write(folding_catch_default);

  delay(500);
}

void loop() {
  if (Serial.available() > 0) {
    String input = Serial.readStringUntil('\n'); // Читаем строку до символа новой строки
    
    // Разделяем входные данные по пробелам
    int params[10]; // Предполагаем, что может быть до 10 параметров
    int count = 0;
    
    // Извлечение параметров из строки
    char *token = strtok(input.c_str(), " ");
    while (token != nullptr && count < 10) {
      params[count++] = atoi(token);
      token = strtok(nullptr, " ");
    }

    // Обработка полученных параметров
    if (count > 0) {
      // Обработка скорости мотора
      int motor_speed = constrain(params[0], 1000, 2000); // Ограничиваем скорость мотора
      motor.writeMicroseconds(motor_speed);

      servo_drive.write(constrain(params[1], 0, 180)); // Преобразование угла в микросекунды
      
      // Обработка дополнительных сервомоторов (серво 1, серво 2 и т.д.)
      for (int i = 2; i < count; i++) {
        int servo_angle = constrain(params[i], 0, 180); // Ограничиваем значение от 0 до 180
        switch (i - 2) { // Начинаем с серво 1
          case 0:
            servo_catch.write(servo_angle);
            break;
          case 1:
            servo_rotate_base.write(servo_angle);
            break;
          case 2: 
            servo_folding_base.write(servo_angle);
            break;
          case 3:
            servo_folding_catch.write(servo_angle);
            break;
          default:
            break;
        }
      }

      delay(100); // Задержка между командами
    }
  }
}
